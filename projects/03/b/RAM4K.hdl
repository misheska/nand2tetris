// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address[9..11], a=sel1, b=sel2, c=sel3, d=sel4, e=sel5, f=sel6, g=sel7, h=sel8);
    RAM64(in=in, load=sel1, address=address[0..8], out=ram1);
    RAM64(in=in, load=sel2, address=address[0..8], out=ram2);
    RAM64(in=in, load=sel3, address=address[0..8], out=ram3);
    RAM64(in=in, load=sel4, address=address[0..8], out=ram4);
    RAM64(in=in, load=sel5, address=address[0..8], out=ram5);
    RAM64(in=in, load=sel6, address=address[0..8], out=ram6);
    RAM64(in=in, load=sel7, address=address[0..8], out=ram7);
    RAM64(in=in, load=sel8, address=address[0..8], out=ram8);
    Mux8Way16(a=ram1, b=ram2, c=ram3, d=ram4, e=ram5, f=ram6, g=ram7, h=ram8, sel=address[9..11], out=out);
}
